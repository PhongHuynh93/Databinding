<?xml version="1.0" encoding="utf-8"?>
<!--info layout mean compiler will create the class depend on xml name-->
<!--When you define layout tag it conveys special meaning to the compiler that data binding is used in this xml so create a new separate class to handle the data binding
and the name of the class is exactly the same name of your xml in a camel case appended with the Binding at the end.
So if your xml name is activity_main then it generate the class with the name ActivityMainBinding.-->
<layout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools">

    <!--info auto create method setRegistrationModel-->
    <data>
        <variable name="registration" type="example.test.phong.databinding.RegistrationModel"/>
    </data>
    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context="example.test.phong.databinding.MainActivity">

        <android.support.design.widget.AppBarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:theme="@style/AppTheme.AppBarOverlay">

            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                android:background="?attr/colorPrimary"
                app:popupTheme="@style/AppTheme.PopupOverlay"/>

        </android.support.design.widget.AppBarLayout>

        <!--<include layout="@layout/content_main"/>-->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            app:layout_behavior="@string/appbar_scrolling_view_behavior">

            <TextView
                android:id="@+id/tv_name"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@{registration.name}"/>

            <!--info Do single modification that is change @{} to @={} that’s it.
What it does is when user types then it set the value back to the model class object so when you want to retrieve the value just call that object.-->
            <EditText
                android:id="@+id/edt_address"
                android:hint="Input address"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@={registration.address}"/>

            <!--test not modify when edt_address is modified-->
            <TextView
                android:id="@+id/tv_address"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@{registration.address}"/>

            <!--info Remember the model class is having age data type as Integer and setText on a textview accepts String type. So it’s important to use String.valueOf() in case the data type is not String.-->
            <TextView
                android:id="@+id/tv_age"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@{String.valueOf(registration.age)}"/>

            <!--info - Well data binding supports lots of expression and ternary operator is one of them.-->
            <TextView
                android:id="@+id/tv_status"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@{registration.isMinor ? @string/minor : @string/major}"/>

        </LinearLayout>

        <android.support.design.widget.FloatingActionButton
            android:id="@+id/fab"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="bottom|end"
            android:layout_margin="@dimen/fab_margin"
            app:srcCompat="@android:drawable/ic_dialog_email"/>

    </android.support.design.widget.CoordinatorLayout>
</layout>